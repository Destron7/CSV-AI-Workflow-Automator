import React, { useState } from 'react';
import axios from 'axios';

export default function CsvCleaning() {
    const [selectedFile, setSelectedFile] = useState(null);
    const [cleaningResult, setCleaningResult] = useState(null);
    const [message, setMessage] = useState('');
    const [isError, setIsError] = useState(false);
    const [isLoading, setIsLoading] = useState(false);
    const [isDownloading, setIsDownloading] = useState(false);

    // Function to handle file selection
    const handleFileChange = (event) => {
        const file = event.target.files[0];
        setSelectedFile(file);
        setMessage('');
        setIsError(false);
        setCleaningResult(null);

        if (file) {
            if (file.type === 'text/csv') {
                setMessage(`File selected: ${file.name}. Click 'Clean CSV' to remove rows with null values.`);
                setIsError(false);
            } else {
                setSelectedFile(null);
                setMessage('Error: Please select a valid CSV file (.csv extension).');
                setIsError(true);
                // Reset file input element if invalid file
                const fileInput = document.getElementById('csvFileToClean');
                if (fileInput) fileInput.value = '';
            }
        } else {
            setMessage(''); // Clear message if no file is selected
        }
    };

    // Function to handle cleaning CSV (removing null rows)
    const handleCleanCsv = async (event) => {
        event.preventDefault();
        setMessage('');
        setIsError(false);
        setCleaningResult(null);
        setIsLoading(true);

        if (!selectedFile) {
            setMessage('Error: Please select a CSV file to clean.');
            setIsError(true);
            setIsLoading(false);
            return;
        }

        // Ensure it's a CSV file before sending
        if (selectedFile.type !== 'text/csv') {
            setMessage('Error: Only CSV files are allowed.');
            setIsError(true);
            setIsLoading(false);
            return;
        }

        const formData = new FormData();
        formData.append('file', selectedFile);

        try {
            // Using axios to send request to FastAPI backend for cleaning
            const response = await axios.post('http://localhost:8000/api/v1/csv/clean/remove-nulls/', formData, {
                headers: {
                    'Content-Type': 'multipart/form-data',
                },
            });

            const data = response.data;
            setCleaningResult(data);
            setMessage('CSV file cleaned successfully! Rows with null values have been removed.');
            setIsError(false);
            console.log('CSV Cleaning response:', data);
        } catch (error) {
            const errorMessage = error.response?.data?.detail || error.message || 'An unknown error occurred.';
            setMessage('Error: ' + errorMessage);
            setIsError(true);
            setCleaningResult(null);
            console.error('CSV Cleaning error:', error);
        } finally {
            setIsLoading(false);
        }
    };

    // Function to download cleaned CSV
    const handleDownloadCleanedCsv = async () => {
        if (!selectedFile) {
            setMessage('Error: No CSV file selected for cleaning.');
            setIsError(true);
            return;
        }

        setIsDownloading(true);

        const formData = new FormData();
        formData.append('file', selectedFile);

        try {
            // Using axios to send request to FastAPI backend for downloading cleaned CSV
            const response = await axios.post('http://localhost:8000/api/v1/csv/clean/remove-nulls/download/', formData, {
                headers: {
                    'Content-Type': 'multipart/form-data',
                },
                responseType: 'blob', // Important for receiving binary data
            });

            // Create a blob URL and trigger download
            const url = window.URL.createObjectURL(new Blob([response.data]));
            const link = document.createElement('a');
            link.href = url;
            link.setAttribute('download', `cleaned_${selectedFile.name}`);
            document.body.appendChild(link);
            link.click();
            link.remove();

            setMessage('Cleaned CSV file downloaded successfully!');
            setIsError(false);
        } catch (error) {
            const errorMessage = 'Failed to download cleaned CSV file.';
            setMessage('Error: ' + errorMessage);
            setIsError(true);
            console.error('CSV Download error:', error);
        } finally {
            setIsDownloading(false);
        }
    };

    // Function to reset all states
    const handleReset = () => {
        setSelectedFile(null);
        setCleaningResult(null);
        setMessage('');
        setIsError(false);
        setIsLoading(false);
        const fileInput = document.getElementById('csvFileToClean');
        if (fileInput) fileInput.value = '';
    };

    return (
        <div className="min-h-screen bg-gray-50 flex flex-col items-center justify-center p-4 sm:p-6 lg:p-8">
            <div className="bg-white p-6 sm:p-8 rounded-xl shadow-2xl w-full max-w-3xl border border-gray-200">
                <h1 className="text-3xl sm:text-4xl font-extrabold text-center text-gray-900 mb-6 sm:mb-8">
                    CSV File Cleaner
                </h1>
                <p className="text-base sm:text-lg text-center text-gray-600 mb-8 sm:mb-10">
                    Upload your CSV file to remove rows with null values.
                </p>

                <form onSubmit={handleCleanCsv} className="space-y-6 sm:space-y-8">
                    {/* CSV File Upload Section */}
                    <div className="p-5 sm:p-6 border border-gray-200 rounded-lg bg-gray-50 shadow-sm">
                        <h2 className="text-xl sm:text-2xl font-semibold text-gray-800 mb-4">Upload Your CSV File</h2>
                        <label htmlFor="csvFileToClean" className="block text-base sm:text-lg font-medium text-gray-700 mb-2">
                            Select a CSV File:
                        </label>
                        <input
                            type="file"
                            id="csvFileToClean"
                            accept=".csv"
                            onChange={handleFileChange}
                            className="block w-full text-sm text-gray-500
                                       file:mr-4 file:py-2 file:px-4
                                       file:rounded-full file:border-0
                                       file:text-sm file:font-semibold
                                       file:bg-blue-100 file:text-blue-700
                                       hover:file:bg-blue-200 cursor-pointer transition duration-200"
                        />
                    </div>

                    {/* Action Buttons */}
                    <div className="flex flex-col sm:flex-row justify-center gap-4">
                        <button
                            type="submit"
                            disabled={isLoading || isDownloading}
                            className="w-full sm:w-auto flex justify-center items-center py-3 px-6 border border-transparent rounded-lg shadow-md text-lg font-semibold text-white bg-gradient-to-r from-green-600 to-blue-700 hover:from-green-700 hover:to-blue-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition duration-300 ease-in-out transform hover:scale-105
                                       disabled:opacity-50 disabled:cursor-not-allowed disabled:from-gray-400 disabled:to-gray-500"
                        >
                            {isLoading ? (
                                <svg className="animate-spin h-6 w-6 mr-3 border-4 border-t-4 border-gray-200 rounded-full" viewBox="0 0 24 24"></svg>
                            ) : (
                                "Clean CSV"
                            )}
                        </button>
                        
                        {cleaningResult && (
                            <button
                                type="button"
                                onClick={handleDownloadCleanedCsv}
                                disabled={isDownloading || isLoading}
                                className="w-full sm:w-auto flex justify-center items-center py-3 px-6 border border-transparent rounded-lg shadow-md text-lg font-semibold text-white bg-gradient-to-r from-blue-600 to-indigo-700 hover:from-blue-700 hover:to-indigo-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition duration-300 ease-in-out transform hover:scale-105
                                           disabled:opacity-50 disabled:cursor-not-allowed disabled:from-gray-400 disabled:to-gray-500"
                            >
                                {isDownloading ? (
                                    <svg className="animate-spin h-6 w-6 mr-3 border-4 border-t-4 border-gray-200 rounded-full" viewBox="0 0 24 24"></svg>
                                ) : (
                                    "Download Cleaned CSV"
                                )}
                            </button>
                        )}
                        
                        <button
                            type="button"
                            onClick={handleReset}
                            className="w-full sm:w-auto flex justify-center items-center py-3 px-6 border border-gray-300 rounded-lg shadow-md text-lg font-semibold text-gray-700 bg-white hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 transition duration-300 ease-in-out transform hover:scale-105"
                        >
                            Reset
                        </button>
                    </div>
                </form>

                {/* Message / Error Display */}
                {message && (
                    <div className={`mt-8 p-4 rounded-lg relative shadow-md ${isError ? 'bg-red-100 border border-red-400 text-red-700' : 'bg-green-100 border border-green-400 text-green-700'}`} role="alert">
                        <strong className="font-bold">{isError ? 'Error!' : 'Success!'}</strong>
                        <span className="block sm:inline ml-2">{message}</span>
                    </div>
                )}

                {/* Cleaning Results Display */}
                {cleaningResult && (
                    <div className="mt-8 p-6 bg-white border border-gray-200 rounded-lg shadow-inner animate-fade-in">
                        <h3 className="text-2xl font-bold mb-6 text-gray-900">CSV Cleaning Results:</h3>

                        {/* Cleaning Summary Section */}
                        <div className="mb-6 p-4 bg-blue-50 border border-blue-200 rounded-lg">
                            <h4 className="text-xl font-semibold text-blue-800 mb-3">🧹 Cleaning Summary</h4>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-gray-700">
                                <p><span className="font-semibold">Filename:</span> {cleaningResult.filename}</p>
                                <p><span className="font-semibold">Original Rows:</span> {cleaningResult.original_rows.toLocaleString()}</p>
                                <p><span className="font-semibold">Cleaned Rows:</span> {cleaningResult.cleaned_rows.toLocaleString()}</p>
                                <p><span className="font-semibold">Rows Removed:</span> {cleaningResult.rows_removed.toLocaleString()} ({cleaningResult.removal_percentage}%)</p>
                                <p className="col-span-full"><span className="font-semibold">Cleaning Operation:</span> {cleaningResult.cleaning_summary}</p>
                            </div>
                        </div>

                        {/* Data Preview Section */}
                        <div className="mb-6">
                            <h4 className="text-xl font-semibold text-gray-800 mb-3">📋 Cleaned Data Preview</h4>
                            <div className="overflow-x-auto rounded-lg border border-gray-200 shadow">
                                <table className="min-w-full divide-y divide-gray-200">
                                    <thead className="bg-gray-50">
                                        <tr>
                                            {cleaningResult.columns.map((column, index) => (
                                                <th 
                                                    key={index} 
                                                    scope="col" 
                                                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                                                >
                                                    {column}
                                                </th>
                                            ))}
                                        </tr>
                                    </thead>
                                    <tbody className="bg-white divide-y divide-gray-200">
                                        {cleaningResult.cleaned_data.map((row, rowIndex) => (
                                            <tr key={rowIndex} className={rowIndex % 2 === 0 ? 'bg-white' : 'bg-gray-50'}>
                                                {cleaningResult.columns.map((column, colIndex) => (
                                                    <td 
                                                        key={`${rowIndex}-${colIndex}`} 
                                                        className="px-6 py-4 whitespace-nowrap text-sm text-gray-500"
                                                    >
                                                        {row[column]}
                                                    </td>
                                                ))}
                                            </tr>
                                        ))}
                                    </tbody>
                                </table>
                            </div>
                            <p className="mt-2 text-sm text-gray-500">
                                Showing {cleaningResult.cleaned_data.length} of {cleaningResult.cleaned_rows} rows
                            </p>
                        </div>
                    </div>
                )}
            </div>
        </div>
    );
}
